#pragma once
#include "Actor.h"
#include "SobManager.h"
#include "AgentPacket.h"
#include <windows.h>    // ::GetTickCount()
#include "AgentEvent.h"

SmartPointer(KAgent);

class KAgent : public KActor
{
	NiDeclareRTTI;
	DeclToStringW;
	DeclareException;

public:
	struct AGUserPoolTag {};
	KAgent(void);
	virtual ~KAgent(void);

	static KAgentPtr Create();
	static void AddManager(KAgentPtr spAGUser);

	KAgentPtr GetThisPtr() { return std::static_pointer_cast<KAgent>((*this).shared_from_this()); }

	// override
	virtual void Tick();
	virtual KEvent* CreateKEvent() { return new KAgentEvent; }

protected:
	//override.
	virtual void ProcessEvent(const KEventPtr& spEvent);
	virtual void OnDestroy();   // LOGINED 상태로 빠져나오고, DB data update를 신청한다

protected:  // Packet Handling
	_DECL_ON_FUNC(EAG_VERIFY_ACCOUNT_REQ, KSimpleServerInfo);
	_DECL_ON_FUNC(EAG_SERVER_RELAY_PACKET_REQ, KServerRelayPacket);
	_DECL_ON_FUNC(EAG_AGIT_RELAY_PACKET_REQ, KAgitRelayPacket);
	_DECL_ON_FUNC(EAG_AGIT_ALL_CONFIG_REQ, DWORD);

	_DECL_ON_FUNC(EAG_ENTER_AGIT_REQ, KEnterAgitReq);
	DECL_ON_FUNC(EAG_AGIT_LOADING_COMPLETE_REQ);
	DECL_ON_FUNC(EAG_LEAVE_AGIT_REQ);
	_DECL_ON_FUNC(EAG_UPDATE_AGIT_USER_INFO_NOT, KEAG_AGIT_LOADING_COMPLETE_REQ);

	DECL_ON_FUNC(EAG_BUY_AGIT_MAP_REQ);
	_DECL_ON_FUNC(EAG_BUY_AGIT_MAP_ACK, KBuyAgitMapAck);
	_DECL_ON_FUNC(EAG_SET_AGIT_OPTION_REQ, KAgitOption);
	_DECL_ON_FUNC(EAG_SET_AGIT_OPTION_ACK, KSetAgitOptionAck);
	_DECL_ON_FUNC(EAG_SEED_FLOWER_POT_REQ, KSeedFlowerPotReq);
	_DECL_ON_FUNC(EAG_SEED_FLOWER_POT_ACK, KSeedFlowerPotAck);
	_DECL_ON_FUNC(EAG_HARVEST_FLOWER_POT_REQ, KHarvestFlowerPotReq);
	_DECL_ON_FUNC(EAG_HARVEST_FLOWER_POT_ACK, KHarvestFlowerPotAck);

	_DECL_ON_FUNC(EAG_AGIT_CHAT_REQ, KChatData);
	_DECL_ON_FUNC(EAG_AGIT_BAN_USER_REQ, KAgitBanUserReq);

	_DECL_ON_FUNC(EAG_SET_AGIT_OBJECT_POS_REQ, KSetAgitObjectPosReq);
	_DECL_ON_FUNC(EAG_SET_AGIT_OBJECT_POS_ACK, KSetAgitObjectPosAck);

	_DECL_ON_FUNC(EAG_AGIT_FRIEND_LIST_REQ, KAgitFriendListReq);
	_DECL_ON_FUNC(EAG_AGIT_FRIEND_LIST_ACK, KSimpleAgitPageList);
	_DECL_ON_FUNC(EAG_AGIT_TOP_RANK_LIST_REQ, DWORD);
	_DECL_ON_FUNC(EAG_AGIT_FAVORITE_LIST_REQ, DWORD);
	_DECL_ON_FUNC(EAG_AGIT_ADD_FAVORITE_REQ, KAgitUserParam);
	_DECL_ON_FUNC(EAG_AGIT_ADD_FAVORITE_ACK, KAgitAddFavoriteAck);
	_DECL_ON_FUNC(EAG_AGIT_REMOVE_FAVORITE_REQ, KAgitUserParam);
	_DECL_ON_FUNC(EAG_AGIT_REMOVE_FAVORITE_ACK, KAgitUserParamAck);

	_DECL_ON_FUNC(EAG_REGISTER_AGIT_PAGE_REQ, KRegisterAgitPageReq);
	_DECL_ON_FUNC(EAG_REGISTER_AGIT_PAGE_ACK, KRegisterAgitPageAck);
	_DECL_ON_FUNC(EAG_UNREGISTER_AGIT_PAGE_REQ, DWORD);
	_DECL_ON_FUNC(EAG_AGIT_PAGE_LIST_REQ, KAgitPageList);

	_DECL_ON_FUNC(EAG_EQUIP_BROWNIE_REQ, KEquipBrownieReq);
	_DECL_ON_FUNC(EAG_EQUIP_BROWNIE_ACK, KEquipBrownieAck);

	_DECL_ON_FUNC(EAG_WATERING_FAIRY_TREE_REQ, DWORD);
	_DECL_ON_FUNC(EAG_WATERING_FAIRY_TREE_ACK, KWateringFairyTreeAck);
	_DECL_ON_FUNC(EAG_FAIRY_TREE_BUFF_NOT, KFairyTreeFruitBuff);
	_DECL_ON_FUNC(EAG_USE_FAIRY_TREE_FRUIT_REQ, DWORD);
	_DECL_ON_FUNC(EAG_USE_FAIRY_TREE_FRUIT_ACK, KUseFairyTreeFruitAck);

	_DECL_ON_FUNC(EAG_ENTER_AGIT_SID_REQ, KEnterAgitReq);
	_DECL_ON_FUNC(EAG_ENTER_AGIT_SID_ACK, KEnterAgitSIDAck);

	_DECL_ON_FUNC(EAG_USER_CONNECT_NOT, KUserTimeParam);
	_DECL_ON_FUNC(EAG_USER_DISCONNECT_NOT, KUserTimeParam);
	DECL_ON_FUNC(EAG_LOAD_AGIT_INFO_NOT);
	DECL_ON_FUNC(EAG_ENTER_AGIT_ACK);
	DECL_ON_FUNC(EAG_DELETE_FOR_AGIT_NOT);

	_DECL_ON_FUNC(EAG_GUESTBOOK_PAGE_REQ, KAgitUserParam);
	_DECL_ON_FUNC(EAG_GUESTBOOK_WRITE_REQ, KGuestBookWriteReq);
	DECL_ON_FUNC(EAG_GUESTBOOK_WRITE_ACK);
	_DECL_ON_FUNC(EAG_GUESTBOOK_DELETE_REQ, KGuestBookDeleteReq);
	DECL_ON_FUNC(EAG_GUESTBOOK_DELETE_ACK);

	_DECL_ON_FUNC(EAG_USE_TRAINING_OBJ_REQ, KUseTrainingObjReq);
	DECL_ON_FUNC(EAG_UPDATE_TRAINING_OBJ_ACK);

	_DECL_ON_FUNC(EAG_OPEN_AGIT_CHARACTER_REQ, PAIR_DWORD_INT);
	_DECL_ON_FUNC(EAG_OPEN_AGIT_CHARACTER_ACK, KOpenAgitCharacterAck);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_POS_REQ, KSetAgitCharPosReq);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_POS_ACK, KSetAgitCharPosAck);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_MOTION_REQ, KSetAgitCharMotionReq);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_MOTION_ACK, KSetAgitCharMotionAck);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_COORDI_REQ, KSetAgitCharCoordiReq);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_COORDI_ACK, KSetAgitCharCoordiAck);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_SPEECH_REQ, KSetAgitCharSpeechReq);
	_DECL_ON_FUNC(EAG_SET_AGIT_CHARACTER_SPEECH_ACK, KSetAgitCharSpeechAck);

protected:
	KSimpleServerInfo   m_kServerInfo;
};